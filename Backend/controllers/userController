const db = require('../db');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Load environment variables
require('dotenv').config();
const JWT_SECRET = process.env.JWT_SECRET;

// Register a new user
const registerUser = (req, res) => {
  const { name, email, password, gender, hobby, skill_level, bio } = req.body;

  // Check if user already exists
  db.query('SELECT * FROM users WHERE email = ?', [email], async (err, results) => {
    if (err) return res.status(500).json({ error: err.message });
    if (results.length > 0) return res.status(400).json({ message: 'Email already registered' });

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Insert user
    const sql = 'INSERT INTO users (name, email, password, gender, hobby, skill_level, bio) VALUES (?, ?, ?, ?, ?, ?, ?)';
    db.query(sql, [name, email, hashedPassword, gender, hobby, skill_level, bio], (err, result) => {
      if (err) return res.status(500).json({ error: err.message });
      res.status(201).json({ message: 'User registered successfully' });
    });
  });
};

// Login user
const loginUser = (req, res) => {
  const { email, password } = req.body;

  db.query('SELECT * FROM users WHERE email = ?', [email], async (err, results) => {
    if (err) return res.status(500).json({ error: err.message });
    if (results.length === 0) return res.status(401).json({ message: 'Invalid email or password' });

    const user = results[0];
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: 'Invalid email or password' });

    // Create JWT token
    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '1h' });
    res.json({ message: 'Login successful', token });
  });
};

// Get all users
const getAllUsers = (req, res) => {
  db.query('SELECT id, name, email, gender, hobby, skill_level, bio, created_at FROM users', (err, results) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(results);
  });
};

// Update user
const updateUser = (req, res) => {
  const { id } = req.params;
  const { name, email, gender, hobby, skill_level, bio } = req.body;

  const sql = 'UPDATE users SET name = ?, email = ?, gender = ?, hobby = ?, skill_level = ?, bio = ? WHERE id = ?';
  db.query(sql, [name, email, gender, hobby, skill_level, bio, id], (err, result) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ message: 'User updated successfully' });
  });
};

// Delete user
const deleteUser = (req, res) => {
  const { id } = req.params;

  db.query('DELETE FROM users WHERE id = ?', [id], (err, result) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ message: 'User deleted successfully' });
  });
};

module.exports = {
  registerUser,
  loginUser,
  getAllUsers,
  updateUser,
  deleteUser,
};
